#!/usr/bin/env tsx
/**
 * Final analysis using romanizeStar like the CLI does
 */

import { romanizeStar } from './src/romanize.js';
import { transformRomanizeStarResult } from './src/presentation/transformers.js';

async function analyzeSegmentation(sentence: string, description: string) {
  console.log('\n' + '='.repeat(80));
  console.log(description);
  console.log(`Sentence: ${sentence}`);
  console.log('='.repeat(80));

  const result = await romanizeStar(sentence, { limit: 1 });
  const transformed = await transformRomanizeStarResult(result);

  // transformed is an array of segmentation alternatives
  if (!transformed || transformed.length === 0) {
    console.log('‚ùå No segmentations found!');
    return;
  }

  const firstAlt = transformed[0];
  const segments = firstAlt.segments || [];

  console.log(`\nNumber of segments: ${segments.length}`);

  for (let i = 0; i < segments.length; i++) {
    const seg = segments[i];
    console.log(`\n[${i}] ${seg.text}`);
    console.log(`   Reading: ${seg.reading || 'none'}`);
    console.log(`   POS: ${seg.entry?.pos || 'none'}`);

    if (seg.entry) {
      const pos = seg.entry.pos || '';
      const isVerb = /\[v[1-9t]/.test(pos) || /\[vi,/.test(pos) || /\[vt,/.test(pos);
      const isAdj = /\[adj-/.test(pos);
      const isAux = /\[aux/.test(pos);
      const isExp = /\[exp/.test(pos);
      const isPron = /\[pn/.test(pos);
      const isNoun = /\[n\]/.test(pos) || /\[n,/.test(pos);

      console.log(`   Type: verb=${isVerb}, adj=${isAdj}, aux=${isAux}, exp=${isExp}, pron=${isPron}, noun=${isNoun}`);

      if (seg.entry.conj && seg.entry.conj.length > 0) {
        console.log(`   Conjugation: ${seg.entry.conj[0].reading} (${seg.entry.conj[0].prop?.[0]?.type || 'unknown'})`);
      }
    }
  }

  // Analyze specific patterns
  console.log('\n' + '-'.repeat(80));
  console.log('Pattern analysis:');

  for (let i = 0; i < segments.length; i++) {
    const seg = segments[i];
    const prevSeg = i > 0 ? segments[i - 1] : null;
    const nextSeg = i < segments.length - 1 ? segments[i + 1] : null;

    // Check for „ÅÆ„Åß
    if (seg.text === '„ÅÆ„Åß') {
      console.log(`\n  ‚ö†Ô∏è  Found '„ÅÆ„Åß' at index ${i}`);
      console.log(`     This is the CAUSAL connector (should not match „ÅÆ„Åß„Åô pattern)`);
      console.log(`     POS: ${seg.entry?.pos}`);
    }

    // Check for „ÅÆ + „Åß„Åô sequence
    if (seg.text === '„ÅÆ' && nextSeg && nextSeg.text === '„Åß„Åô') {
      console.log(`\n  üëÄ Found '„ÅÆ + „Åß„Åô' sequence at indices ${i}, ${i + 1}`);

      if (prevSeg) {
        console.log(`     Previous token: ${prevSeg.text}`);
        console.log(`     Previous POS: ${prevSeg.entry?.pos}`);

        const prevPos = prevSeg.entry?.pos || '';
        const prevIsVerb = /\[v[1-9t]/.test(prevPos) || /\[vi,/.test(prevPos) || /\[vt,/.test(prevPos);
        const prevIsAdj = /\[adj-/.test(prevPos);
        const prevIsAux = /\[aux/.test(prevPos);
        const prevIsNoun = /\[n\]/.test(prevPos) || /\[n,/.test(prevPos);

        if (prevIsVerb || prevIsAdj || prevIsAux) {
          console.log(`     ‚úÖ Previous token IS a predicate (should match explanatory „ÅÆ„Åß„Åô)`);
        } else if (prevIsNoun) {
          console.log(`     ‚ùå Previous token is a bare noun (possessive/interrogative „ÅÆ, NOT explanatory)`);
        } else {
          console.log(`     ‚ö†Ô∏è  Previous token type: verb=${prevIsVerb}, adj=${prevIsAdj}, aux=${prevIsAux}, noun=${prevIsNoun}`);
        }
      }
    }

    // Check for „ÅÆ„Åß„Åô/„Çì„Åß„Åô as single token
    if (seg.text === '„ÅÆ„Åß„Åô' || seg.text === '„Çì„Åß„Åô') {
      console.log(`\n  üí° Found '${seg.text}' as SINGLE TOKEN at index ${i}`);
      console.log(`     POS: ${seg.entry?.pos}`);

      if (prevSeg) {
        console.log(`     Previous token: ${prevSeg.text}`);
        console.log(`     Previous POS: ${prevSeg.entry?.pos}`);

        const prevPos = prevSeg.entry?.pos || '';
        const prevIsVerb = /\[v[1-9t]/.test(prevPos) || /\[vi,/.test(prevPos) || /\[vt,/.test(prevPos);
        const prevIsAdj = /\[adj-/.test(prevPos);
        const prevIsAux = /\[aux/.test(prevPos);

        if (prevIsVerb || prevIsAdj || prevIsAux) {
          console.log(`     ‚úÖ Previous token IS a predicate (should match)`);
        } else {
          console.log(`     ‚ùå Previous token is NOT a predicate`);
        }
      }
    }

    // Check for ‰Ωï
    if (seg.text === '‰Ωï' || (seg.text && seg.text.includes('‰Ωï'))) {
      console.log(`\n  üîç Found '‰Ωï' (nani/nan) at index ${i}`);
      console.log(`     Text: ${seg.text}`);
      console.log(`     Reading: ${seg.reading}`);
      console.log(`     POS: ${seg.entry?.pos}`);

      const pos = seg.entry?.pos || '';
      const isPron = /\[pn/.test(pos);
      const isNoun = /\[n\]/.test(pos) || /\[n,/.test(pos);
      const isExp = /\[exp/.test(pos);

      console.log(`     Type: pronoun=${isPron}, noun=${isNoun}, expression=${isExp}`);

      if (isPron || isNoun) {
        console.log(`     ‚ö†Ô∏è  This is a PRONOUN/NOUN, not an expression!`);
        console.log(`     If followed by „ÅÆ, it's interrogative/possessive, NOT explanatory`);
      }
    }
  }
}

async function main() {
  console.log('N4 „ÅÆ„Åß„Åô/„Çì„Åß„Åô - Final Debug Analysis');
  console.log('======================================\n');

  await analyzeSegmentation(
    'ÊÄ•„ÅÑ„Åß„ÅÑ„Åü„ÅÆ„Åß„ÄÅ‰∏ÅÂØß„Å´Ë™¨Êòé„Åß„Åç„Å™„Åã„Å£„Åü„ÅÆ„Åß„Åô„ÄÇ',
    'FALSE NEGATIVE: Should match „ÅÆ„Åß„Åô at END but doesn\'t'
  );

  await analyzeSegmentation(
    '„Åì„Çå„ÅØ‰Ωï„ÅÆ„Åß„Åô„Åã„ÄÇ',
    'FALSE POSITIVE: Should NOT match (interrogative „ÅÆ)'
  );

  await analyzeSegmentation(
    '‰ªäÊó•„ÅØÊó©„ÅèÂ∏∞„Çã„Çì„Åß„Åô„ÄÇ',
    'CONTROL: SHOULD match (explanatory „Çì„Åß„Åô)'
  );

  await analyzeSegmentation(
    '„Åì„Çå„ÅØÊØç„ÅÆ„Åß„Åô„ÄÇ',
    'CONTROL: should NOT match (possessive „ÅÆ)'
  );

  await analyzeSegmentation(
    'Èõ®„Å™„ÅÆ„Åß„ÄÅ‰ªäÊó•„ÅØ‰∏≠Ê≠¢„Åó„Åæ„Åô„ÄÇ',
    'CONTROL: should NOT match (causal „ÅÆ„Åß)'
  );
}

main().catch(console.error);
