export declare const SOKUON_CHARACTERS: {
    sokuon: string;
};
export declare const ITERATION_CHARACTERS: {
    iter: string;
    iterV: string;
};
export declare const MODIFIER_CHARACTERS: {
    "+a": string;
    "+i": string;
    "+u": string;
    "+e": string;
    "+o": string;
    "+ya": string;
    "+yu": string;
    "+yo": string;
    "+wa": string;
    longVowel: string;
};
export declare const KANA_CHARACTERS: {
    a: string;
    i: string;
    u: string;
    e: string;
    o: string;
    ka: string;
    ki: string;
    ku: string;
    ke: string;
    ko: string;
    sa: string;
    shi: string;
    su: string;
    se: string;
    so: string;
    ta: string;
    chi: string;
    tsu: string;
    te: string;
    to: string;
    na: string;
    ni: string;
    nu: string;
    ne: string;
    no: string;
    ha: string;
    hi: string;
    fu: string;
    he: string;
    ho: string;
    ma: string;
    mi: string;
    mu: string;
    me: string;
    mo: string;
    ya: string;
    yu: string;
    yo: string;
    ra: string;
    ri: string;
    ru: string;
    re: string;
    ro: string;
    wa: string;
    wi: string;
    we: string;
    wo: string;
    n: string;
    ga: string;
    gi: string;
    gu: string;
    ge: string;
    go: string;
    za: string;
    ji: string;
    zu: string;
    ze: string;
    zo: string;
    da: string;
    dji: string;
    dzu: string;
    de: string;
    do: string;
    ba: string;
    bi: string;
    bu: string;
    be: string;
    bo: string;
    pa: string;
    pi: string;
    pu: string;
    pe: string;
    po: string;
    vu: string;
};
export declare const ALL_CHARACTERS: {
    a: string;
    i: string;
    u: string;
    e: string;
    o: string;
    ka: string;
    ki: string;
    ku: string;
    ke: string;
    ko: string;
    sa: string;
    shi: string;
    su: string;
    se: string;
    so: string;
    ta: string;
    chi: string;
    tsu: string;
    te: string;
    to: string;
    na: string;
    ni: string;
    nu: string;
    ne: string;
    no: string;
    ha: string;
    hi: string;
    fu: string;
    he: string;
    ho: string;
    ma: string;
    mi: string;
    mu: string;
    me: string;
    mo: string;
    ya: string;
    yu: string;
    yo: string;
    ra: string;
    ri: string;
    ru: string;
    re: string;
    ro: string;
    wa: string;
    wi: string;
    we: string;
    wo: string;
    n: string;
    ga: string;
    gi: string;
    gu: string;
    ge: string;
    go: string;
    za: string;
    ji: string;
    zu: string;
    ze: string;
    zo: string;
    da: string;
    dji: string;
    dzu: string;
    de: string;
    do: string;
    ba: string;
    bi: string;
    bu: string;
    be: string;
    bo: string;
    pa: string;
    pi: string;
    pu: string;
    pe: string;
    po: string;
    vu: string;
    "+a": string;
    "+i": string;
    "+u": string;
    "+e": string;
    "+o": string;
    "+ya": string;
    "+yu": string;
    "+yo": string;
    "+wa": string;
    longVowel: string;
    iter: string;
    iterV: string;
    sokuon: string;
};
export declare const CHAR_CLASS_HASH: Map<string, string>;
export declare function getCharClass(char: string): string;
export declare function longVowelModifierP(modifier: string, prevChar: string): boolean;
export declare const DAKUTEN_HASH: Map<string, string>;
export declare const HANDAKUTEN_HASH: Map<string, string>;
export declare const UNDAKUTEN_HASH: Map<string, string>;
export declare function voiceChar(cc: string): string;
export declare const PUNCTUATION_MARKS: [string, string][];
export declare const DAKUTEN_JOIN: [string, string][];
export declare const HALF_WIDTH_KANA = "\uFF65\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFF9E\uFF9F";
export declare const FULL_WIDTH_KANA = "\u30FB\u30F2\u30A1\u30A3\u30A5\u30A7\u30A9\u30E3\u30E5\u30E7\u30C3\u30FC\u30A2\u30A4\u30A6\u30A8\u30AA\u30AB\u30AD\u30AF\u30B1\u30B3\u30B5\u30B7\u30B9\u30BB\u30BD\u30BF\u30C1\u30C4\u30C6\u30C8\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D2\u30D5\u30D8\u30DB\u30DE\u30DF\u30E0\u30E1\u30E2\u30E4\u30E6\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EF\u30F3\u309B\u309C";
export declare const ABNORMAL_CHARS: string;
export declare const NORMAL_CHARS: string;
export declare const KATAKANA_REGEX: RegExp;
export declare const KATAKANA_UNIQ_REGEX: RegExp;
export declare const HIRAGANA_REGEX: RegExp;
export declare const KANJI_REGEX: RegExp;
export declare const KANJI_CHAR_REGEX: RegExp;
export declare const NONWORD_REGEX: RegExp;
export declare const NUMERIC_REGEX: RegExp;
export declare const NUM_WORD_REGEX: RegExp;
export declare const WORD_REGEX: RegExp;
export declare const DIGIT_REGEX: RegExp;
export declare const DECIMAL_POINT_REGEX: RegExp;
export declare const BASIC_SPLIT_REGEX: RegExp;
export type CharClass = "katakana" | "katakana-uniq" | "hiragana" | "kanji" | "kanji-char" | "kana" | "traditional" | "nonword" | "number";
export declare const CHAR_CLASS_REGEX_MAPPING: Record<CharClass, RegExp>;
export declare const CHAR_SCANNERS: Map<CharClass, RegExp>;
export declare function testWord(word: string, charClass: CharClass): boolean;
export declare function countCharClass(word: string, charClass: CharClass): number;
export declare function collectCharClass(word: string, charClass: CharClass): string[];
export declare function sequentialKanjiPositions(word: string, offset?: number): number[];
export declare function kanjiMask(word: string): string;
export declare function kanjiRegex(word: string): RegExp;
export declare function kanjiMatch(word: string, reading: string): boolean;
export declare function kanjiCrossMatch(word: string, reading: string, newWord: string): string | null;
export declare function simplifyNgrams(str: string, map: [string, string][]): string;
export declare function normalize(str: string, context?: 'kana', skipPunctuation?: boolean): string;
export declare function splitByRegex(regex: RegExp, str: string): string[];
export interface BasicSplitSegment {
    type: 'word' | 'misc';
    text: string;
}
export declare function basicSplit(str: string): BasicSplitSegment[];
export declare function moraLength(str: string): number;
export declare function asHiragana(str: string): string;
export declare function asKatakana(str: string): string;
export declare function consecutiveCharGroups(charClass: CharClass, str: string, start?: number, end?: number): [number, number][];
export declare function kanjiPrefix(word: string): string;
export declare function unrendaku(txt: string, fresh?: boolean): string;
export declare function rendaku(txt: string, fresh?: boolean, handakuten?: boolean): string;
export declare function geminate(txt: string, fresh?: boolean): string;
export declare function destem(word: string, stem: number, charClass?: CharClass): string;
export declare function matchDiff(s1: string, s2: string): [any[], number] | null;
export declare function safeSubseq(sequence: string, start: number, end?: number): string | null;
export declare function join(separator: string, list: any[], key?: (obj: any) => string): string;
//# sourceMappingURL=characters.d.ts.map